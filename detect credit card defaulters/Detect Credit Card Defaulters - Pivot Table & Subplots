{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1oP7EG-2PTudSahSkLe7UBmHfubyDUsom","timestamp":1716882884397}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"g-45CZggOrpA"},"source":["# Lesson 98: Detect Credit Card Defaulters - Pivot Table & Subplots"]},{"cell_type":"markdown","metadata":{"id":"E37EJJ6KodVF"},"source":["### Teacher-Student Activities\n","\n","In this lesson, we will begin learning another classification algorithm called **Decision Trees**. It forms a basis for all the tree based algorithms such as **Random Forest** and **XGBoost**. We will build decision tree by solving a classification-based problem in which we have to find the credit card defaulters.\n","\n","**What is Credit Card default**\n","\n","A payment default occurs when you fail to pay the Minimum Amount Due on the credit card for a few consecutive months. Usually, the default notice is sent by the card issuer after 6 consecutive missed payments. What happens when you are marked as a credit card defaulter:\n","1. Credit score will be impacted.\n","2. Your credit card gets blocked.\n","3. You may get blacklisted.\n","3. High interest and penalty rates.\n","4. Legal action can be taken.\n","5. Recovery agents may approach you.\n","6. Assets acquisition.\n","\n","[Credit Card Defaulter ](https://www.paisabazaar.com/credit-card/credit-card-defaulter/)"]},{"cell_type":"markdown","metadata":{"id":"trii0pD_mdZR"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"JQA4bk5QZAak"},"source":["#### Problem Statement\n","\n","The Taiwanese bank has issued credit cards to many of its clients. They have maintained a dataset of credit card `DEFAULTERS` for a period from April 2005 to September 2005.\n","\n","You need to build a **Decision Tree** model to predict whether or not the client will pay the credit card bill for the next month.\n","\n","Predicting accurately which customers are most probable to default represents a significant business opportunity for all banks. This can improve the customer screening process and also helps in assessing the credibility of the customer. It also helps bank in reducing the spending limit of the credit card holder or initiate with the legal steps for amount recovery.\n","\n","**Dataset Description**\n","\n","The dataset contains 30,000 rows and 25 columns. Each column represents an attribute of the customer as described in the table below.\n","\n","|Sr No.|Attribute|Attribute Information|\n","|-|-|-|\n","|1|ID|ID of each customer, which has been masked to display serial number to hide confidential customer information (Integer)|\n","|2|LIMIT_BAL|Amount of given credit in NT dollars (including supplementary creditcards) (Float)|\n","|3|SEX|Gender (1=male, 2=female) (Integer)|\n","|4|EDUCATION| (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown, 6=unknown) (Integer)|\n","|5|MARRIAGE|Marital status (1=married, 2=single, 3=others) (Integer)|\n","|6|AGE|Customer age in years (Integer)|\n","|7|PAY_0|Repayment status in September, 2005 (-1=paid on time, 1=payment delay for one month, 2=payment delay for two months, â€¦ , 8=payment delay for eight months and above) (Integer)|\n","|8|PAY_2|Repayment status in August, 2005 (scale same as above) (Integer)|\n","|9|PAY_3|Repayment status in July, 2005 (scale same as above) (Integer)|\n","|10|PAY_4|Repayment status in June, 2005 (scale same as above) (Integer)|\n","|11|PAY_5|Repayment status in May, 2005 (scale same as above) (Integer)|\n","|12|PAY_6|Repayment status in April, 2005 (scale same as above) (Integer)|\n","|13|BILL_AMT1|Amount of bill statement in September, 2005 (NT dollar) (Float)|\n","|14|BILL_AMT2|Amount of bill statement in August, 2005 (NT dollar) (Float)|\n","|15|BILL_AMT3|Amount of bill statement in July, 2005 (NT dollar) (Float)|\n","|16|BILL_AMT4|Amount of bill statement in June, 2005 (NT dollar) (Float)|\n","|17|BILL_AMT5|Amount of bill statement in May, 2005 (NT dollar) (Float)|\n","|18|BILL_AMT6|Amount of bill statement in April, 2005 (NT dollar) (Float)|\n","|19|PAY_AMT1|Amount of previous payment in September, 2005 (NT dollar) (Float)|\n","|20|PAY_AMT2|Amount of previous payment in August, 2005 (NT dollar) (Float)|\n","|21|PAY_AMT3|Amount of previous payment in July, 2005 (NT dollar) (Float)|\n","|22|PAY_AMT4|Amount of previous payment in June, 2005 (NT dollar) (Float)|\n","|23|PAY_AMT5|Amount of previous payment in May, 2005 (NT dollar) (Float)|\n","|24|PAY_AMT6|Amount of previous payment in April, 2005 (NT dollar) (Float)|\n","|25|default.payment.next.month|Default payment (1=yes, 0=no) (Integer)|\n","\n","<br>\n","\n","This data set consists of following key features:\n","- The payment status for 6 previous bill cycles.\n","- The outstanding bill amount and the repayment status along with the amount paid.\n","- The demographic information of the customers.\n","\n","The target column of this dataset is `default.payment.next.month` which classifies the customer into two categories:\n","- `1` (yes) - means the customer is not going to pay for the next month bill and hence will be termed as **defaulter**.\n","- `0` (no) - means the customer will pay the bill for the next month and will be termed as **non-defaulter**.\n","\n","\n","Some ideas for exploration:\n","1. How does the probability of default payment vary by categories of different demographic variables?\n","2. Which variables are the strongest predictors of default payment?\n","\n","\n","**Dataset Credits:** https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients\n","\n","\n","**Citations:**  \n","\n","1. Yeh, I. C., & Lien, C. H. (2009). The comparisons of data mining techniques for the predictive accuracy of probability of default of credit card clients. Expert Systems with Applications, 36(2), 2473-2480.\n","\n","2. Dua, D., & Graff, C.. (2017). UCI Machine Learning Repository."]},{"cell_type":"markdown","metadata":{"id":"2aFh-21fZAXK"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"DMLOc1fJZAVG"},"source":["#### Activity 1: Importing Modules & Reading Data\n","\n","Let's import the necessary Python modules, read the data from a csv file to create a Pandas DataFrame and go through the necessary data-cleaning process (if required).\n","\n","Here is the link to the dataset:\n","https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/uci-credit-card-fraud/UCI_Credit_Card.csv"]},{"cell_type":"code","metadata":{"id":"FeTEtUPHPEzV","colab":{"base_uri":"https://localhost:8080/","height":412},"executionInfo":{"status":"ok","timestamp":1718363824537,"user_tz":-330,"elapsed":4571,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"4e5339d4-2533-41e1-8563-af1a93ae2854"},"source":["# S1.1: Import the modules, read the dataset and create a Pandas DataFrame.\n","import pandas as pd\n","df = pd.read_csv(\" https://s3-student-datasets-bucket.whjr.online/whitehat-ds-datasets/uci-credit-card-fraud/UCI_Credit_Card.csv\")\n","df.head(10)"],"execution_count":1,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   ID  LIMIT_BAL  SEX  EDUCATION  MARRIAGE  AGE  PAY_0  PAY_2  PAY_3  PAY_4  \\\n","0   1    20000.0    2          2         1   24      2      2     -1     -1   \n","1   2   120000.0    2          2         2   26     -1      2      0      0   \n","2   3    90000.0    2          2         2   34      0      0      0      0   \n","3   4    50000.0    2          2         1   37      0      0      0      0   \n","4   5    50000.0    1          2         1   57     -1      0     -1      0   \n","5   6    50000.0    1          1         2   37      0      0      0      0   \n","6   7   500000.0    1          1         2   29      0      0      0      0   \n","7   8   100000.0    2          2         2   23      0     -1     -1      0   \n","8   9   140000.0    2          3         1   28      0      0      2      0   \n","9  10    20000.0    1          3         2   35     -2     -2     -2     -2   \n","\n","   ...  BILL_AMT4  BILL_AMT5  BILL_AMT6  PAY_AMT1  PAY_AMT2  PAY_AMT3  \\\n","0  ...        0.0        0.0        0.0       0.0     689.0       0.0   \n","1  ...     3272.0     3455.0     3261.0       0.0    1000.0    1000.0   \n","2  ...    14331.0    14948.0    15549.0    1518.0    1500.0    1000.0   \n","3  ...    28314.0    28959.0    29547.0    2000.0    2019.0    1200.0   \n","4  ...    20940.0    19146.0    19131.0    2000.0   36681.0   10000.0   \n","5  ...    19394.0    19619.0    20024.0    2500.0    1815.0     657.0   \n","6  ...   542653.0   483003.0   473944.0   55000.0   40000.0   38000.0   \n","7  ...      221.0     -159.0      567.0     380.0     601.0       0.0   \n","8  ...    12211.0    11793.0     3719.0    3329.0       0.0     432.0   \n","9  ...        0.0    13007.0    13912.0       0.0       0.0       0.0   \n","\n","   PAY_AMT4  PAY_AMT5  PAY_AMT6  default.payment.next.month  \n","0       0.0       0.0       0.0                           1  \n","1    1000.0       0.0    2000.0                           1  \n","2    1000.0    1000.0    5000.0                           0  \n","3    1100.0    1069.0    1000.0                           0  \n","4    9000.0     689.0     679.0                           0  \n","5    1000.0    1000.0     800.0                           0  \n","6   20239.0   13750.0   13770.0                           0  \n","7     581.0    1687.0    1542.0                           0  \n","8    1000.0    1000.0    1000.0                           0  \n","9   13007.0    1122.0       0.0                           0  \n","\n","[10 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-8bf5cc45-5716-4470-8604-466f0a7fefb4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>LIMIT_BAL</th>\n","      <th>SEX</th>\n","      <th>EDUCATION</th>\n","      <th>MARRIAGE</th>\n","      <th>AGE</th>\n","      <th>PAY_0</th>\n","      <th>PAY_2</th>\n","      <th>PAY_3</th>\n","      <th>PAY_4</th>\n","      <th>...</th>\n","      <th>BILL_AMT4</th>\n","      <th>BILL_AMT5</th>\n","      <th>BILL_AMT6</th>\n","      <th>PAY_AMT1</th>\n","      <th>PAY_AMT2</th>\n","      <th>PAY_AMT3</th>\n","      <th>PAY_AMT4</th>\n","      <th>PAY_AMT5</th>\n","      <th>PAY_AMT6</th>\n","      <th>default.payment.next.month</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>20000.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>24</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>689.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>120000.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>26</td>\n","      <td>-1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>3272.0</td>\n","      <td>3455.0</td>\n","      <td>3261.0</td>\n","      <td>0.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>0.0</td>\n","      <td>2000.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>90000.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>14331.0</td>\n","      <td>14948.0</td>\n","      <td>15549.0</td>\n","      <td>1518.0</td>\n","      <td>1500.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>5000.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>50000.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>37</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>28314.0</td>\n","      <td>28959.0</td>\n","      <td>29547.0</td>\n","      <td>2000.0</td>\n","      <td>2019.0</td>\n","      <td>1200.0</td>\n","      <td>1100.0</td>\n","      <td>1069.0</td>\n","      <td>1000.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>50000.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>57</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>20940.0</td>\n","      <td>19146.0</td>\n","      <td>19131.0</td>\n","      <td>2000.0</td>\n","      <td>36681.0</td>\n","      <td>10000.0</td>\n","      <td>9000.0</td>\n","      <td>689.0</td>\n","      <td>679.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>50000.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>37</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>19394.0</td>\n","      <td>19619.0</td>\n","      <td>20024.0</td>\n","      <td>2500.0</td>\n","      <td>1815.0</td>\n","      <td>657.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>800.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","      <td>500000.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>542653.0</td>\n","      <td>483003.0</td>\n","      <td>473944.0</td>\n","      <td>55000.0</td>\n","      <td>40000.0</td>\n","      <td>38000.0</td>\n","      <td>20239.0</td>\n","      <td>13750.0</td>\n","      <td>13770.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>8</td>\n","      <td>100000.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>23</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>221.0</td>\n","      <td>-159.0</td>\n","      <td>567.0</td>\n","      <td>380.0</td>\n","      <td>601.0</td>\n","      <td>0.0</td>\n","      <td>581.0</td>\n","      <td>1687.0</td>\n","      <td>1542.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>9</td>\n","      <td>140000.0</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>28</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>12211.0</td>\n","      <td>11793.0</td>\n","      <td>3719.0</td>\n","      <td>3329.0</td>\n","      <td>0.0</td>\n","      <td>432.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>10</td>\n","      <td>20000.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>35</td>\n","      <td>-2</td>\n","      <td>-2</td>\n","      <td>-2</td>\n","      <td>-2</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>13007.0</td>\n","      <td>13912.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>13007.0</td>\n","      <td>1122.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>10 rows Ã— 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8bf5cc45-5716-4470-8604-466f0a7fefb4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8bf5cc45-5716-4470-8604-466f0a7fefb4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8bf5cc45-5716-4470-8604-466f0a7fefb4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e911f0e3-3b95-4581-9766-ea9e0c9d52fe\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e911f0e3-3b95-4581-9766-ea9e0c9d52fe')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e911f0e3-3b95-4581-9766-ea9e0c9d52fe button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":1}]},{"cell_type":"markdown","metadata":{"id":"Ek14OpqKq5IN"},"source":["Now, let's find out the total number of rows and columns, data-types of columns and missing values (if exist) in the dataset."]},{"cell_type":"code","metadata":{"id":"6F7cIWGsgV4H","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718363824538,"user_tz":-330,"elapsed":23,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"a5dd59f9-7672-4451-ce1b-8f190b7952e9"},"source":["# S1.2: Get the total number of rows and columns, data-types of columns and missing values (if exist) in the dataset.\n","df.info()"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 30000 entries, 0 to 29999\n","Data columns (total 25 columns):\n"," #   Column                      Non-Null Count  Dtype  \n","---  ------                      --------------  -----  \n"," 0   ID                          30000 non-null  int64  \n"," 1   LIMIT_BAL                   30000 non-null  float64\n"," 2   SEX                         30000 non-null  int64  \n"," 3   EDUCATION                   30000 non-null  int64  \n"," 4   MARRIAGE                    30000 non-null  int64  \n"," 5   AGE                         30000 non-null  int64  \n"," 6   PAY_0                       30000 non-null  int64  \n"," 7   PAY_2                       30000 non-null  int64  \n"," 8   PAY_3                       30000 non-null  int64  \n"," 9   PAY_4                       30000 non-null  int64  \n"," 10  PAY_5                       30000 non-null  int64  \n"," 11  PAY_6                       30000 non-null  int64  \n"," 12  BILL_AMT1                   30000 non-null  float64\n"," 13  BILL_AMT2                   30000 non-null  float64\n"," 14  BILL_AMT3                   30000 non-null  float64\n"," 15  BILL_AMT4                   30000 non-null  float64\n"," 16  BILL_AMT5                   30000 non-null  float64\n"," 17  BILL_AMT6                   30000 non-null  float64\n"," 18  PAY_AMT1                    30000 non-null  float64\n"," 19  PAY_AMT2                    30000 non-null  float64\n"," 20  PAY_AMT3                    30000 non-null  float64\n"," 21  PAY_AMT4                    30000 non-null  float64\n"," 22  PAY_AMT5                    30000 non-null  float64\n"," 23  PAY_AMT6                    30000 non-null  float64\n"," 24  default.payment.next.month  30000 non-null  int64  \n","dtypes: float64(13), int64(12)\n","memory usage: 5.7 MB\n"]}]},{"cell_type":"markdown","metadata":{"id":"tVyfHrZaS0Zw"},"source":["There are 30,000 rows and 25 columns and 0 missing (or null) values in the dataset. Also, all the columns have numeric values so we won't have to encode any non-numeric value into a numeric values.\n","\n","Here, we can see that the column names don't have whitespaces. We can also observe that the column names in the repayment condition are not consistent, hence we will rename `PAY_0` to `PAY_1`. The column name for the target variable i.e. `default.payment.next.month` can be changed to a shorter one say `DEFAULT` for convenience."]},{"cell_type":"code","metadata":{"id":"RDqc0rvjfV18","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"ok","timestamp":1718363824538,"user_tz":-330,"elapsed":20,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"59116b92-5c74-4908-ca33-ab1bff5651e3"},"source":["# S1.3: Rename 'PAY_0' to 'PAY_1', and 'default.payment.next.month' to 'DEFAULT'.\n","df.rename(columns = {\"PAY_0\":\"PAY_1\",\"default.payment.next.month\":\"DEFAULT\"},inplace=True)\n","# Check whether the names of the two columns are changed or not.\n","df"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          ID  LIMIT_BAL  SEX  EDUCATION  MARRIAGE  AGE  PAY_1  PAY_2  PAY_3  \\\n","0          1    20000.0    2          2         1   24      2      2     -1   \n","1          2   120000.0    2          2         2   26     -1      2      0   \n","2          3    90000.0    2          2         2   34      0      0      0   \n","3          4    50000.0    2          2         1   37      0      0      0   \n","4          5    50000.0    1          2         1   57     -1      0     -1   \n","...      ...        ...  ...        ...       ...  ...    ...    ...    ...   \n","29995  29996   220000.0    1          3         1   39      0      0      0   \n","29996  29997   150000.0    1          3         2   43     -1     -1     -1   \n","29997  29998    30000.0    1          2         2   37      4      3      2   \n","29998  29999    80000.0    1          3         1   41      1     -1      0   \n","29999  30000    50000.0    1          2         1   46      0      0      0   \n","\n","       PAY_4  ...  BILL_AMT4  BILL_AMT5  BILL_AMT6  PAY_AMT1  PAY_AMT2  \\\n","0         -1  ...        0.0        0.0        0.0       0.0     689.0   \n","1          0  ...     3272.0     3455.0     3261.0       0.0    1000.0   \n","2          0  ...    14331.0    14948.0    15549.0    1518.0    1500.0   \n","3          0  ...    28314.0    28959.0    29547.0    2000.0    2019.0   \n","4          0  ...    20940.0    19146.0    19131.0    2000.0   36681.0   \n","...      ...  ...        ...        ...        ...       ...       ...   \n","29995      0  ...    88004.0    31237.0    15980.0    8500.0   20000.0   \n","29996     -1  ...     8979.0     5190.0        0.0    1837.0    3526.0   \n","29997     -1  ...    20878.0    20582.0    19357.0       0.0       0.0   \n","29998      0  ...    52774.0    11855.0    48944.0   85900.0    3409.0   \n","29999      0  ...    36535.0    32428.0    15313.0    2078.0    1800.0   \n","\n","       PAY_AMT3  PAY_AMT4  PAY_AMT5  PAY_AMT6  DEFAULT  \n","0           0.0       0.0       0.0       0.0        1  \n","1        1000.0    1000.0       0.0    2000.0        1  \n","2        1000.0    1000.0    1000.0    5000.0        0  \n","3        1200.0    1100.0    1069.0    1000.0        0  \n","4       10000.0    9000.0     689.0     679.0        0  \n","...         ...       ...       ...       ...      ...  \n","29995    5003.0    3047.0    5000.0    1000.0        0  \n","29996    8998.0     129.0       0.0       0.0        0  \n","29997   22000.0    4200.0    2000.0    3100.0        1  \n","29998    1178.0    1926.0   52964.0    1804.0        1  \n","29999    1430.0    1000.0    1000.0    1000.0        1  \n","\n","[30000 rows x 25 columns]"],"text/html":["\n","  <div id=\"df-1ec138d8-8829-4a54-9849-757db2a8e4cf\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID</th>\n","      <th>LIMIT_BAL</th>\n","      <th>SEX</th>\n","      <th>EDUCATION</th>\n","      <th>MARRIAGE</th>\n","      <th>AGE</th>\n","      <th>PAY_1</th>\n","      <th>PAY_2</th>\n","      <th>PAY_3</th>\n","      <th>PAY_4</th>\n","      <th>...</th>\n","      <th>BILL_AMT4</th>\n","      <th>BILL_AMT5</th>\n","      <th>BILL_AMT6</th>\n","      <th>PAY_AMT1</th>\n","      <th>PAY_AMT2</th>\n","      <th>PAY_AMT3</th>\n","      <th>PAY_AMT4</th>\n","      <th>PAY_AMT5</th>\n","      <th>PAY_AMT6</th>\n","      <th>DEFAULT</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>20000.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>24</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>689.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>120000.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>26</td>\n","      <td>-1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>3272.0</td>\n","      <td>3455.0</td>\n","      <td>3261.0</td>\n","      <td>0.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>0.0</td>\n","      <td>2000.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>90000.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>14331.0</td>\n","      <td>14948.0</td>\n","      <td>15549.0</td>\n","      <td>1518.0</td>\n","      <td>1500.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>5000.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>50000.0</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>37</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>28314.0</td>\n","      <td>28959.0</td>\n","      <td>29547.0</td>\n","      <td>2000.0</td>\n","      <td>2019.0</td>\n","      <td>1200.0</td>\n","      <td>1100.0</td>\n","      <td>1069.0</td>\n","      <td>1000.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>50000.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>57</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>20940.0</td>\n","      <td>19146.0</td>\n","      <td>19131.0</td>\n","      <td>2000.0</td>\n","      <td>36681.0</td>\n","      <td>10000.0</td>\n","      <td>9000.0</td>\n","      <td>689.0</td>\n","      <td>679.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>29995</th>\n","      <td>29996</td>\n","      <td>220000.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>39</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>88004.0</td>\n","      <td>31237.0</td>\n","      <td>15980.0</td>\n","      <td>8500.0</td>\n","      <td>20000.0</td>\n","      <td>5003.0</td>\n","      <td>3047.0</td>\n","      <td>5000.0</td>\n","      <td>1000.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>29996</th>\n","      <td>29997</td>\n","      <td>150000.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>43</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>8979.0</td>\n","      <td>5190.0</td>\n","      <td>0.0</td>\n","      <td>1837.0</td>\n","      <td>3526.0</td>\n","      <td>8998.0</td>\n","      <td>129.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>29997</th>\n","      <td>29998</td>\n","      <td>30000.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>37</td>\n","      <td>4</td>\n","      <td>3</td>\n","      <td>2</td>\n","      <td>-1</td>\n","      <td>...</td>\n","      <td>20878.0</td>\n","      <td>20582.0</td>\n","      <td>19357.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>22000.0</td>\n","      <td>4200.0</td>\n","      <td>2000.0</td>\n","      <td>3100.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>29998</th>\n","      <td>29999</td>\n","      <td>80000.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>41</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>52774.0</td>\n","      <td>11855.0</td>\n","      <td>48944.0</td>\n","      <td>85900.0</td>\n","      <td>3409.0</td>\n","      <td>1178.0</td>\n","      <td>1926.0</td>\n","      <td>52964.0</td>\n","      <td>1804.0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>29999</th>\n","      <td>30000</td>\n","      <td>50000.0</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>46</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>36535.0</td>\n","      <td>32428.0</td>\n","      <td>15313.0</td>\n","      <td>2078.0</td>\n","      <td>1800.0</td>\n","      <td>1430.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>1000.0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>30000 rows Ã— 25 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1ec138d8-8829-4a54-9849-757db2a8e4cf')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1ec138d8-8829-4a54-9849-757db2a8e4cf button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1ec138d8-8829-4a54-9849-757db2a8e4cf');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7d59e176-a379-4109-9ade-b75e8ecc7a87\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7d59e176-a379-4109-9ade-b75e8ecc7a87')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7d59e176-a379-4109-9ade-b75e8ecc7a87 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2554e6a1-b728-4e53-b909-017513edcadc\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2554e6a1-b728-4e53-b909-017513edcadc button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"V5pE-agBfGQb"},"source":["We can see that\n","\n","- `'PAY_0'` has changed to `'PAY_1'`\n","\n","- `'default.payment.next.month'` has changed to `'DEFAULT'`"]},{"cell_type":"markdown","metadata":{"id":"JC1cYeHMsMEH"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"wnmZ_6Kprvce"},"source":["#### Activity 2: Data Analysis\n","\n","Now, let's analyse the data to find out any kind of pattern in the behaviour of defaulters.\n","\n","Let's get the counts of defaulters and non-defaulters to see whether former are in large numbers or the latter."]},{"cell_type":"code","metadata":{"id":"VOppxBnEi1eB","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718363824538,"user_tz":-330,"elapsed":19,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"f1f48edd-f75e-4630-ed56-f3e151c19d45"},"source":["# S2.1: Get the counts of defaulters and non-defaulters to see whether former are in large numbers or the latter.\n","print(df[\"DEFAULT\"].value_counts())"],"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["DEFAULT\n","0    23364\n","1     6636\n","Name: count, dtype: int64\n"]}]},{"cell_type":"markdown","metadata":{"id":"i48hJ7Vzk--O"},"source":["Out of 30,000 credit card clients, 23,364 pay on time (non-defaulters) and the remaining 6,636 clients don't pay on time (defaulters). Let's get the percentage of defaulters and non-defaulters."]},{"cell_type":"code","metadata":{"id":"Jbm2WxOL2Q0f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718363824538,"user_tz":-330,"elapsed":17,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"ab011fae-3373-472b-e395-4b767d3ac4f4"},"source":["# S2.2: Get the percentage of defaulters and non-defaulters.\n","df[\"DEFAULT\"].value_counts(normalize=True)*100"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DEFAULT\n","0    77.88\n","1    22.12\n","Name: proportion, dtype: float64"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","metadata":{"id":"xa5Iycj33Lpd"},"source":["So only about **22%** of the credit card clients of Taiwanese bank **fail to pay their credit card bills on time.**\n","\n","Now, let's calculate the number of male and female clients out of all the defaulters. For this,\n","\n","- Take a subset of the data-frame containing all the rows and only `'ID', 'SEX', 'DEFAULT'` columns\n","\n","- Group the above sliced data-frame by `'DEFAULT'` and `'SEX'` columns in this order."]},{"cell_type":"code","metadata":{"id":"I6pZMWyh4NN1","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718363824538,"user_tz":-330,"elapsed":16,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"90b72671-e12a-406d-d8ab-1fc006609fb1"},"source":["# S2.3: Calculate the number of male and female clients out of all the defaulters.\n","df[\"SEX\"].value_counts()\n"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SEX\n","2    18112\n","1    11888\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["df[[\"SEX\",\"DEFAULT\",\"PAY_1\"]].groupby([\"DEFAULT\",\"SEX\"]).count()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"WW9KMapRQ2Do","executionInfo":{"status":"ok","timestamp":1718363824538,"user_tz":-330,"elapsed":15,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"566d3a54-5456-441f-8a1f-089b96274a59"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             PAY_1\n","DEFAULT SEX       \n","0       1     9015\n","        2    14349\n","1       1     2873\n","        2     3763"],"text/html":["\n","  <div id=\"df-dee14ff2-19c5-44be-a595-fbc34dd18dbe\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>PAY_1</th>\n","    </tr>\n","    <tr>\n","      <th>DEFAULT</th>\n","      <th>SEX</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">0</th>\n","      <th>1</th>\n","      <td>9015</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>14349</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">1</th>\n","      <th>1</th>\n","      <td>2873</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3763</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dee14ff2-19c5-44be-a595-fbc34dd18dbe')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-dee14ff2-19c5-44be-a595-fbc34dd18dbe button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-dee14ff2-19c5-44be-a595-fbc34dd18dbe');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-db4caf1e-41e4-4c5a-aa16-28890366d0b3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-db4caf1e-41e4-4c5a-aa16-28890366d0b3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-db4caf1e-41e4-4c5a-aa16-28890366d0b3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[[\\\"SEX\\\",\\\"DEFAULT\\\",\\\"PAY_1\\\"]]\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"PAY_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5309,\n        \"min\": 2873,\n        \"max\": 14349,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          14349,\n          3763,\n          9015\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"i-UAZAdF91RL"},"source":["Out of 6636 defaulters, 2873 were `1`-male and 3763 were `2`-female.\n","\n","Similarly, out of all the defaulters, let's calculate the number of credit card clients having different education qualification."]},{"cell_type":"code","metadata":{"id":"6p30OxDvAX5Y","colab":{"base_uri":"https://localhost:8080/","height":488},"executionInfo":{"status":"ok","timestamp":1718363824538,"user_tz":-330,"elapsed":14,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"bcbd8576-ed43-42db-c490-72655cef5748"},"source":["# S2.4: Out of all the defaulters, calculate the number of credit card clients having different education qualification.\n","df[[\"EDUCATION\",\"DEFAULT\",\"PAY_1\"]].groupby([\"DEFAULT\",\"EDUCATION\"]).count()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                   PAY_1\n","DEFAULT EDUCATION       \n","0       0             14\n","        1           8549\n","        2          10700\n","        3           3680\n","        4            116\n","        5            262\n","        6             43\n","1       1           2036\n","        2           3330\n","        3           1237\n","        4              7\n","        5             18\n","        6              8"],"text/html":["\n","  <div id=\"df-d4672d18-67e4-4f16-84ec-2b1087fb3fe1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>PAY_1</th>\n","    </tr>\n","    <tr>\n","      <th>DEFAULT</th>\n","      <th>EDUCATION</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"7\" valign=\"top\">0</th>\n","      <th>0</th>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>8549</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>10700</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3680</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>116</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>262</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>43</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"6\" valign=\"top\">1</th>\n","      <th>1</th>\n","      <td>2036</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3330</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1237</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4672d18-67e4-4f16-84ec-2b1087fb3fe1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d4672d18-67e4-4f16-84ec-2b1087fb3fe1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d4672d18-67e4-4f16-84ec-2b1087fb3fe1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a2dcef4a-9f6b-4b72-a881-f4b7a3b00e58\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a2dcef4a-9f6b-4b72-a881-f4b7a3b00e58')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a2dcef4a-9f6b-4b72-a881-f4b7a3b00e58 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[[\\\"EDUCATION\\\",\\\"DEFAULT\\\",\\\"PAY_1\\\"]]\",\n  \"rows\": 13,\n  \"fields\": [\n    {\n      \"column\": \"PAY_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3520,\n        \"min\": 7,\n        \"max\": 10700,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          18,\n          1237,\n          14\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","metadata":{"id":"6LZv5BrjBei5"},"source":["Out of 6636 defaulters, majorly\n","\n","- 3330 were university graduates.\n","\n","- 2036 were graduation school graduates.\n","\n","- 1237 were high school graduates.\n","\n","\n","The reason for higher number of defaulters being university school graduates could be that the most of the credit clients are university graduates. Let's validate this suspicion by calculating the counts of different categorical values in the `'EDUCATION'` column."]},{"cell_type":"code","metadata":{"id":"LydMgtc5CmUm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718363824539,"user_tz":-330,"elapsed":14,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"292506f8-8b6a-42c7-8900-df63ed7f8c3f"},"source":["# S2.5: Calculate the counts of different categorical values in the 'EDUCATION' column.\n","df[\"EDUCATION\"].value_counts()"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["EDUCATION\n","2    14030\n","1    10585\n","3     4917\n","5      280\n","4      123\n","6       51\n","0       14\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"qKeMO8K_CypM"},"source":["As you can see, our suspicion is correct because the most of the credit clients are university graduates followed by graduation school graduates followed by high school graduates.\n","\n","Here, we observe that in the `EDUCATION` column we have some redundant information. From the dataset description we have:\n","\n"," * `1` - graduate school\n"," * `2` - university\n"," * `3` - high school\n"," * `4` - others\n"," * `5` - unknown\n"," * `6` - unknown\n","\n","This clearly indicates that we can merge the labels `5` and `6` to reduce the number of categories for education and replace the number of unwanted values in the column. The label `4` denotes that a client has some other form of education which could be either vocational training, certificate, diploma etc.\n","\n","It will help us in reducing the complexity of the resulting decision tree and reduce the computational time as well.\n","\n","**Hint:**\n","The syntax used is: `pandas.DataFrame.loc [boolean_condition, column_name] = new_value`."]},{"cell_type":"code","metadata":{"id":"H2d5u05PfV62","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718363824539,"user_tz":-330,"elapsed":13,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"50b47231-616b-4916-f75c-d433d71facf9"},"source":["# S2.6 Remove redundancy in the 'EDUCATION' column.\n","df.loc[(df[\"EDUCATION\"] == 0) | (df[\"EDUCATION\"] == 6),\"EDUCATION\"]=5\n","# Calculate the count of all the labels again in the 'EDUCATION' column.\n","df[\"EDUCATION\"].value_counts()"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["EDUCATION\n","2    14030\n","1    10585\n","3     4917\n","5      345\n","4      123\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"D59CvCwlHMq2"},"source":["Similarly, out of all the defaulters, let's calculate the number of credit card clients based on their marriage status."]},{"cell_type":"code","metadata":{"id":"VYKlF2BmWh5O","colab":{"base_uri":"https://localhost:8080/","height":331},"executionInfo":{"status":"ok","timestamp":1718363826178,"user_tz":-330,"elapsed":1650,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"c920dd0c-9232-48fe-db30-d1a33ec2bde9"},"source":["# S2.7: Calculate the number of clients based on the marriage status out of all the defaulters.\n","df[[\"MARRIAGE\",\"DEFAULT\",\"PAY_1\"]].groupby([\"DEFAULT\",\"MARRIAGE\"]).count()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  PAY_1\n","DEFAULT MARRIAGE       \n","0       0            49\n","        1         10453\n","        2         12623\n","        3           239\n","1       0             5\n","        1          3206\n","        2          3341\n","        3            84"],"text/html":["\n","  <div id=\"df-3d527cb9-7392-470e-bcac-78a2204dc85a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>PAY_1</th>\n","    </tr>\n","    <tr>\n","      <th>DEFAULT</th>\n","      <th>MARRIAGE</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"4\" valign=\"top\">0</th>\n","      <th>0</th>\n","      <td>49</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>10453</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>12623</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>239</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"4\" valign=\"top\">1</th>\n","      <th>0</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3206</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3341</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>84</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d527cb9-7392-470e-bcac-78a2204dc85a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3d527cb9-7392-470e-bcac-78a2204dc85a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3d527cb9-7392-470e-bcac-78a2204dc85a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-80e32d92-6771-4df4-99cc-cfbd31e89496\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-80e32d92-6771-4df4-99cc-cfbd31e89496')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-80e32d92-6771-4df4-99cc-cfbd31e89496 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[[\\\"MARRIAGE\\\",\\\"DEFAULT\\\",\\\"PAY_1\\\"]]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PAY_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5037,\n        \"min\": 5,\n        \"max\": 12623,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10453,\n          3206,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["df.columns\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pVQtDlgkUfCr","executionInfo":{"status":"ok","timestamp":1718363826179,"user_tz":-330,"elapsed":16,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"996afb9b-f13e-45c3-d2c2-e0402a871764"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['ID', 'LIMIT_BAL', 'SEX', 'EDUCATION', 'MARRIAGE', 'AGE', 'PAY_1',\n","       'PAY_2', 'PAY_3', 'PAY_4', 'PAY_5', 'PAY_6', 'BILL_AMT1', 'BILL_AMT2',\n","       'BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6', 'PAY_AMT1',\n","       'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6', 'DEFAULT'],\n","      dtype='object')"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"fpa28XQ67V6Z"},"source":["Here, we observe that in the education column we have some redundant information. From the dataset description we have:\n","\n"," * `1` - married\n"," * `2` - single\n"," * `3` - others\n","\n","This dataset has an extra parameter `0` in the marriage column. That may arise due to some error or when customer is not willing to provide the information. We can merge the label `0` with `3` to reduce the number of categories for marriage and replace the number of unwanted values in the column."]},{"cell_type":"code","metadata":{"id":"jxSEQOYP7RQf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718363826179,"user_tz":-330,"elapsed":15,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"29e4516b-d411-4b10-9544-7a93bae7e3ff"},"source":["# S2.8 Remove redundancy in the 'MARRIAGE' column.\n","df.loc[df[\"MARRIAGE\"] == 0, \"MARRIAGE\"] = 3\n","# Calculate the count of all the labels again in the 'MARRIAGE' column.\n","df[\"MARRIAGE\"].value_counts()"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MARRIAGE\n","2    15964\n","1    13659\n","3      377\n","Name: count, dtype: int64"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"ms-Cj8gQ7Vib"},"source":["Now find out the number of single and married credit card defaulters out of all the defaulters."]},{"cell_type":"code","metadata":{"id":"-sp80vF3Dk2T","colab":{"base_uri":"https://localhost:8080/","height":268},"executionInfo":{"status":"ok","timestamp":1718363826179,"user_tz":-330,"elapsed":14,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"bb09987b-21e9-4d1e-bba0-7dcf7530a16a"},"source":["# S2.9: Out of all the defaulters, calculate the number of credit card clients having different marital status.\n","df[[\"MARRIAGE\",\"DEFAULT\",\"PAY_1\"]].groupby([\"DEFAULT\",\"MARRIAGE\"]).count()"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  PAY_1\n","DEFAULT MARRIAGE       \n","0       1         10453\n","        2         12623\n","        3           288\n","1       1          3206\n","        2          3341\n","        3            89"],"text/html":["\n","  <div id=\"df-06a2e08c-f33f-4c5b-9ba8-7b8c25ade0b3\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>PAY_1</th>\n","    </tr>\n","    <tr>\n","      <th>DEFAULT</th>\n","      <th>MARRIAGE</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">0</th>\n","      <th>1</th>\n","      <td>10453</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>12623</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>288</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">1</th>\n","      <th>1</th>\n","      <td>3206</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3341</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>89</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-06a2e08c-f33f-4c5b-9ba8-7b8c25ade0b3')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-06a2e08c-f33f-4c5b-9ba8-7b8c25ade0b3 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-06a2e08c-f33f-4c5b-9ba8-7b8c25ade0b3');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3e76f8eb-acd2-4534-8ba5-808f6abe30b4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3e76f8eb-acd2-4534-8ba5-808f6abe30b4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3e76f8eb-acd2-4534-8ba5-808f6abe30b4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[[\\\"MARRIAGE\\\",\\\"DEFAULT\\\",\\\"PAY_1\\\"]]\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"PAY_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5294,\n        \"min\": 89,\n        \"max\": 12623,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          10453,\n          12623,\n          89\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"rd-zJc_VD61A"},"source":["Among defaulters, both single and married credit card clients are equal nearly the same in number.\n","\n","Now, let's calculate the mean and median age of defaulters and non-defaulters."]},{"cell_type":"code","metadata":{"id":"Ie7VMezSEeDI","colab":{"base_uri":"https://localhost:8080/","height":174},"executionInfo":{"status":"ok","timestamp":1718363826179,"user_tz":-330,"elapsed":13,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"ed7db716-7aa0-49b0-9c25-9a396b39f790"},"source":["# S2.10: Calculate the mean and median age of defaulters and non-defaulters.\n","df[[\"AGE\",\"DEFAULT\"]].groupby([\"DEFAULT\"]).agg(func = [\"mean\",\"median\"])"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               AGE       \n","              mean median\n","DEFAULT                  \n","0        35.417266   34.0\n","1        35.725738   34.0"],"text/html":["\n","  <div id=\"df-8a1debb3-8654-4db8-a99d-268fa27cc688\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","\n","    .dataframe thead tr:last-of-type th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th colspan=\"2\" halign=\"left\">AGE</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th>mean</th>\n","      <th>median</th>\n","    </tr>\n","    <tr>\n","      <th>DEFAULT</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>35.417266</td>\n","      <td>34.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>35.725738</td>\n","      <td>34.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8a1debb3-8654-4db8-a99d-268fa27cc688')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8a1debb3-8654-4db8-a99d-268fa27cc688 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8a1debb3-8654-4db8-a99d-268fa27cc688');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fb7a8bcd-4713-4d88-b331-a46a2d7b0811\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb7a8bcd-4713-4d88-b331-a46a2d7b0811')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fb7a8bcd-4713-4d88-b331-a46a2d7b0811 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[[\\\"AGE\\\",\\\"DEFAULT\\\"]]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": [\n        \"DEFAULT\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"AGE\",\n        \"mean\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21812300892982628,\n        \"min\": 35.417265879130284,\n        \"max\": 35.72573839662447,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          35.72573839662447,\n          35.417265879130284\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"AGE\",\n        \"median\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 34.0,\n        \"max\": 34.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          34.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"hpYBKKnuFKZS"},"source":["Both the defaulters and non-defaulters have the same median and approximately the same mean age.\n","\n","Similarly, let's calculate the mean and median `'LIMIT_BAL'` of defaulters and non-defaulters."]},{"cell_type":"code","metadata":{"id":"jP4I7akXKIcF","colab":{"base_uri":"https://localhost:8080/","height":174},"executionInfo":{"status":"ok","timestamp":1718363826179,"user_tz":-330,"elapsed":12,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"0ded4fac-3fd0-42bf-a6e6-3523268c3bbd"},"source":["# S2.11: Calculate the mean and median 'LIMIT_BAL' of defaulters and non-defaulters.\n","df[[\"LIMIT_BAL\",\"DEFAULT\"]].groupby([\"DEFAULT\"]).agg(func = [\"mean\",\"median\"])"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             LIMIT_BAL          \n","                  mean    median\n","DEFAULT                         \n","0        178099.726074  150000.0\n","1        130109.656420   90000.0"],"text/html":["\n","  <div id=\"df-c4ffd18a-7236-4dc4-8bb8-a3824694b9b5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead tr th {\n","        text-align: left;\n","    }\n","\n","    .dataframe thead tr:last-of-type th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th></th>\n","      <th colspan=\"2\" halign=\"left\">LIMIT_BAL</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th>mean</th>\n","      <th>median</th>\n","    </tr>\n","    <tr>\n","      <th>DEFAULT</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>178099.726074</td>\n","      <td>150000.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>130109.656420</td>\n","      <td>90000.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4ffd18a-7236-4dc4-8bb8-a3824694b9b5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c4ffd18a-7236-4dc4-8bb8-a3824694b9b5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c4ffd18a-7236-4dc4-8bb8-a3824694b9b5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-921ecb1a-2740-4731-a34f-7d2c439edf16\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-921ecb1a-2740-4731-a34f-7d2c439edf16')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-921ecb1a-2740-4731-a34f-7d2c439edf16 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[[\\\"LIMIT_BAL\\\",\\\"DEFAULT\\\"]]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": [\n        \"DEFAULT\",\n        \"\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"LIMIT_BAL\",\n        \"mean\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33934.10368250439,\n        \"min\": 130109.65641952984,\n        \"max\": 178099.72607430234,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          130109.65641952984,\n          178099.72607430234\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": [\n        \"LIMIT_BAL\",\n        \"median\"\n      ],\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42426.40687119285,\n        \"min\": 90000.0,\n        \"max\": 150000.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          90000.0,\n          150000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"chQTG_o6Kdno"},"source":["The mean and median credit card limit of defaulters were lower compared to the limit of non-defaulters. This suggests that the repayment capacity of defaulters was lesser and hence they were given the lower credit limit.\n","\n","Let's calculate the mean, median, quartiles and standard deviation values of the columns having continous numeric values in the data-frame."]},{"cell_type":"code","metadata":{"id":"Ph_0PiwLRePE","colab":{"base_uri":"https://localhost:8080/","height":320},"executionInfo":{"status":"ok","timestamp":1718363826179,"user_tz":-330,"elapsed":11,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"47622d8e-e541-43f3-c4e7-d52bd5e5dbe9"},"source":["# S2.12: Print the statistical description of the columns having continous numeric values in the data-frame.\n","df[['LIMIT_BAL','AGE','BILL_AMT1', 'BILL_AMT2','BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']].describe()\n"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            LIMIT_BAL           AGE      BILL_AMT1      BILL_AMT2  \\\n","count    30000.000000  30000.000000   30000.000000   30000.000000   \n","mean    167484.322667     35.485500   51223.330900   49179.075167   \n","std     129747.661567      9.217904   73635.860576   71173.768783   \n","min      10000.000000     21.000000 -165580.000000  -69777.000000   \n","25%      50000.000000     28.000000    3558.750000    2984.750000   \n","50%     140000.000000     34.000000   22381.500000   21200.000000   \n","75%     240000.000000     41.000000   67091.000000   64006.250000   \n","max    1000000.000000     79.000000  964511.000000  983931.000000   \n","\n","          BILL_AMT3      BILL_AMT4      BILL_AMT5      BILL_AMT6  \n","count  3.000000e+04   30000.000000   30000.000000   30000.000000  \n","mean   4.701315e+04   43262.948967   40311.400967   38871.760400  \n","std    6.934939e+04   64332.856134   60797.155770   59554.107537  \n","min   -1.572640e+05 -170000.000000  -81334.000000 -339603.000000  \n","25%    2.666250e+03    2326.750000    1763.000000    1256.000000  \n","50%    2.008850e+04   19052.000000   18104.500000   17071.000000  \n","75%    6.016475e+04   54506.000000   50190.500000   49198.250000  \n","max    1.664089e+06  891586.000000  927171.000000  961664.000000  "],"text/html":["\n","  <div id=\"df-1d08bc95-9519-400c-88b2-c14cfcb7abcd\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>LIMIT_BAL</th>\n","      <th>AGE</th>\n","      <th>BILL_AMT1</th>\n","      <th>BILL_AMT2</th>\n","      <th>BILL_AMT3</th>\n","      <th>BILL_AMT4</th>\n","      <th>BILL_AMT5</th>\n","      <th>BILL_AMT6</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>30000.000000</td>\n","      <td>30000.000000</td>\n","      <td>30000.000000</td>\n","      <td>30000.000000</td>\n","      <td>3.000000e+04</td>\n","      <td>30000.000000</td>\n","      <td>30000.000000</td>\n","      <td>30000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>167484.322667</td>\n","      <td>35.485500</td>\n","      <td>51223.330900</td>\n","      <td>49179.075167</td>\n","      <td>4.701315e+04</td>\n","      <td>43262.948967</td>\n","      <td>40311.400967</td>\n","      <td>38871.760400</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>129747.661567</td>\n","      <td>9.217904</td>\n","      <td>73635.860576</td>\n","      <td>71173.768783</td>\n","      <td>6.934939e+04</td>\n","      <td>64332.856134</td>\n","      <td>60797.155770</td>\n","      <td>59554.107537</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>10000.000000</td>\n","      <td>21.000000</td>\n","      <td>-165580.000000</td>\n","      <td>-69777.000000</td>\n","      <td>-1.572640e+05</td>\n","      <td>-170000.000000</td>\n","      <td>-81334.000000</td>\n","      <td>-339603.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>50000.000000</td>\n","      <td>28.000000</td>\n","      <td>3558.750000</td>\n","      <td>2984.750000</td>\n","      <td>2.666250e+03</td>\n","      <td>2326.750000</td>\n","      <td>1763.000000</td>\n","      <td>1256.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>140000.000000</td>\n","      <td>34.000000</td>\n","      <td>22381.500000</td>\n","      <td>21200.000000</td>\n","      <td>2.008850e+04</td>\n","      <td>19052.000000</td>\n","      <td>18104.500000</td>\n","      <td>17071.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>240000.000000</td>\n","      <td>41.000000</td>\n","      <td>67091.000000</td>\n","      <td>64006.250000</td>\n","      <td>6.016475e+04</td>\n","      <td>54506.000000</td>\n","      <td>50190.500000</td>\n","      <td>49198.250000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>1000000.000000</td>\n","      <td>79.000000</td>\n","      <td>964511.000000</td>\n","      <td>983931.000000</td>\n","      <td>1.664089e+06</td>\n","      <td>891586.000000</td>\n","      <td>927171.000000</td>\n","      <td>961664.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d08bc95-9519-400c-88b2-c14cfcb7abcd')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1d08bc95-9519-400c-88b2-c14cfcb7abcd button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1d08bc95-9519-400c-88b2-c14cfcb7abcd');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-72f05669-8ca9-4f7d-af2c-64c80377d296\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-72f05669-8ca9-4f7d-af2c-64c80377d296')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-72f05669-8ca9-4f7d-af2c-64c80377d296 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[['LIMIT_BAL','AGE','BILL_AMT1', 'BILL_AMT2','BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"LIMIT_BAL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 324080.4228359886,\n        \"min\": 10000.0,\n        \"max\": 1000000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          167484.32266666667,\n          140000.0,\n          30000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10594.110237282835,\n        \"min\": 9.217904068090188,\n        \"max\": 30000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          35.4855,\n          34.0,\n          30000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 345311.3879106362,\n        \"min\": -165580.0,\n        \"max\": 964511.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          51223.3309,\n          22381.5,\n          30000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 342227.8769074243,\n        \"min\": -69777.0,\n        \"max\": 983931.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          49179.07516666667,\n          21200.0,\n          30000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 589081.0926450061,\n        \"min\": -157264.0,\n        \"max\": 1664089.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          47013.1548,\n          20088.5,\n          30000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 321776.6768216613,\n        \"min\": -170000.0,\n        \"max\": 891586.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          43262.94896666666,\n          19052.0,\n          30000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 324764.85941956664,\n        \"min\": -81334.0,\n        \"max\": 927171.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          40311.40096666667,\n          18104.5,\n          30000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 371321.20062396035,\n        \"min\": -339603.0,\n        \"max\": 961664.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          38871.7604,\n          17071.0,\n          30000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"oG7NQg8qpvgQ"},"source":["We can split the above measures of central tendency values by different categorical columns. For this we need to make pivot tables."]},{"cell_type":"markdown","metadata":{"id":"I56j-Rkqo5bv"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"_1l2OqSVo2PC"},"source":["#### Activity 3: Pivot Table\n","\n","A pivot table allows you to summarise statistical parameters in a two dimensional table. It is more powerful version of the grouping feature in Pandas.\n","\n","To create a pivot table, you need to use the `pivot_table()` function of the Pandas module which returns a two dimensional table (also a Pandas DataFrame object). The levels in the pivot table will be stored in `MultiIndex` objects (hierarchical indexes) on the index and columns of the result DataFrame. Its **syntax** is:\n","\n","> `pandas.pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', sort=True)`\n","\n","where\n","\n","- `data` is a Pandas DataFrame object containing raw data.\n","\n","- `values` is an optional parameter that decides which column values to aggregate.\n","\n","- `index` decides about which column the values need to be split. In other words, about which column values you want to group the other column values.\n","\n","- `columns` allows you to group the values further by a particular column.\n","\n","- `aggfunc` is an aggregation function with mean being the default aggregator.\n","\n","- `sort` specifies if the result should be sorted. Its default value is `True`\n","\n","You can read more about the `pivot_table()` function from the link provided below:\n","\n","https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html\n","\n","Let's create a pivot table that displays the median value of the columns containing continous numeric values and group them by `DEFAULT` and `AGE` columns."]},{"cell_type":"code","metadata":{"id":"2aOcgN6DlrR2","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1718363826179,"user_tz":-330,"elapsed":11,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"f357426e-d886-47ea-97fc-ecb5dbf6e067"},"source":["# S3.1: Display the median value of the columns containing continous numeric values and group them by 'DEFAULT' and 'AGE' columns.\n","list1 = ['LIMIT_BAL','AGE','BILL_AMT1', 'BILL_AMT2','BILL_AMT3', 'BILL_AMT4', 'BILL_AMT5', 'BILL_AMT6']\n","pd.pivot_table(data = df,values = list1,index = [\"DEFAULT\",\"SEX\"],aggfunc = \"median\")"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             AGE  BILL_AMT1  BILL_AMT2  BILL_AMT3  BILL_AMT4  BILL_AMT5  \\\n","DEFAULT SEX                                                               \n","0       1     35    25742.0    23827.0    21103.0    19483.0    18440.0   \n","        2     33    21368.0    20344.0    19570.0    18475.0    17318.0   \n","1       1     36    20139.0    20114.0    19753.0    19032.0    18161.0   \n","        2     33    20226.0    20503.0    20023.0    19315.0    18843.0   \n","\n","             BILL_AMT6  LIMIT_BAL  \n","DEFAULT SEX                        \n","0       1      17531.0   150000.0  \n","        2      15872.0   160000.0  \n","1       1      17959.0    80000.0  \n","        2      18244.0   100000.0  "],"text/html":["\n","  <div id=\"df-ced2c238-ab9f-4e33-95eb-1b34273f2928\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>AGE</th>\n","      <th>BILL_AMT1</th>\n","      <th>BILL_AMT2</th>\n","      <th>BILL_AMT3</th>\n","      <th>BILL_AMT4</th>\n","      <th>BILL_AMT5</th>\n","      <th>BILL_AMT6</th>\n","      <th>LIMIT_BAL</th>\n","    </tr>\n","    <tr>\n","      <th>DEFAULT</th>\n","      <th>SEX</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">0</th>\n","      <th>1</th>\n","      <td>35</td>\n","      <td>25742.0</td>\n","      <td>23827.0</td>\n","      <td>21103.0</td>\n","      <td>19483.0</td>\n","      <td>18440.0</td>\n","      <td>17531.0</td>\n","      <td>150000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>21368.0</td>\n","      <td>20344.0</td>\n","      <td>19570.0</td>\n","      <td>18475.0</td>\n","      <td>17318.0</td>\n","      <td>15872.0</td>\n","      <td>160000.0</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"2\" valign=\"top\">1</th>\n","      <th>1</th>\n","      <td>36</td>\n","      <td>20139.0</td>\n","      <td>20114.0</td>\n","      <td>19753.0</td>\n","      <td>19032.0</td>\n","      <td>18161.0</td>\n","      <td>17959.0</td>\n","      <td>80000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>20226.0</td>\n","      <td>20503.0</td>\n","      <td>20023.0</td>\n","      <td>19315.0</td>\n","      <td>18843.0</td>\n","      <td>18244.0</td>\n","      <td>100000.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ced2c238-ab9f-4e33-95eb-1b34273f2928')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ced2c238-ab9f-4e33-95eb-1b34273f2928 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ced2c238-ab9f-4e33-95eb-1b34273f2928');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-0a4a86cb-daea-4e82-bbd9-e0384ca92134\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a4a86cb-daea-4e82-bbd9-e0384ca92134')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-0a4a86cb-daea-4e82-bbd9-e0384ca92134 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"pd\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"AGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 33,\n        \"max\": 36,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          35,\n          33,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2642.188407993142,\n        \"min\": 20139.0,\n        \"max\": 25742.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          21368.0,\n          20226.0,\n          25742.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1760.5902419359254,\n        \"min\": 20114.0,\n        \"max\": 23827.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          20344.0,\n          20503.0,\n          23827.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 686.2086053089104,\n        \"min\": 19570.0,\n        \"max\": 21103.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          19570.0,\n          20023.0,\n          21103.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 441.93014153823,\n        \"min\": 18475.0,\n        \"max\": 19483.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          18475.0,\n          19315.0,\n          19483.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 645.5315639068317,\n        \"min\": 17318.0,\n        \"max\": 18843.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          17318.0,\n          18843.0,\n          18440.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1060.9355933954394,\n        \"min\": 15872.0,\n        \"max\": 18244.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          15872.0,\n          18244.0,\n          17531.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LIMIT_BAL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 38622.10075418823,\n        \"min\": 80000.0,\n        \"max\": 160000.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          160000.0,\n          100000.0,\n          150000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"Msbj3fhw9TUi"},"source":["From the pivot table we can understand the distribution of the defaulters and non-defaulters with respect to the `gender` of the customer. We observe that:\n","* Among defaulters, female clients have less median age when compared with the male clients.\n","* The `LIMIT_BAL` for defaulters is less for male clients when compared with female clients."]},{"cell_type":"code","metadata":{"id":"IGUIkrPvxK5z","colab":{"base_uri":"https://localhost:8080/","height":268},"executionInfo":{"status":"ok","timestamp":1718363826179,"user_tz":-330,"elapsed":10,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"7df374b6-59ef-4473-f607-27a8fa4e8962"},"source":["# S3.2: Display the median value of the columns containing continous numeric values and group them by 'DEFAULT' and 'MARRIAGE' columns.\n","pd.pivot_table(data = df,values = list1 ,index = [\"DEFAULT\",\"MARRIAGE\"],aggfunc = 'median')"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  AGE  BILL_AMT1  BILL_AMT2  BILL_AMT3  BILL_AMT4  BILL_AMT5  \\\n","DEFAULT MARRIAGE                                                               \n","0       1          39    22573.0    21022.0    19905.0    18532.0    17390.0   \n","        2          30    23469.0    22382.0    20401.0    19353.0    18336.0   \n","        3          42    21953.5    20432.0    18411.0    17915.5    16784.0   \n","1       1          40    21633.5    21190.5    20445.0    19588.0    19001.5   \n","        2          29    19438.0    19844.0    19492.0    18859.0    18187.0   \n","        3          44    18126.0    18459.0    18942.0    18300.0    17760.0   \n","\n","                  BILL_AMT6  LIMIT_BAL  \n","DEFAULT MARRIAGE                        \n","0       1           15442.0   180000.0  \n","        2           17345.0   140000.0  \n","        3           14691.0    70000.0  \n","1       1           18320.5   100000.0  \n","        2           17976.0    80000.0  \n","        3           17327.0    50000.0  "],"text/html":["\n","  <div id=\"df-3995097c-0f1c-463e-9bc8-1abbaf00a4f0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>AGE</th>\n","      <th>BILL_AMT1</th>\n","      <th>BILL_AMT2</th>\n","      <th>BILL_AMT3</th>\n","      <th>BILL_AMT4</th>\n","      <th>BILL_AMT5</th>\n","      <th>BILL_AMT6</th>\n","      <th>LIMIT_BAL</th>\n","    </tr>\n","    <tr>\n","      <th>DEFAULT</th>\n","      <th>MARRIAGE</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">0</th>\n","      <th>1</th>\n","      <td>39</td>\n","      <td>22573.0</td>\n","      <td>21022.0</td>\n","      <td>19905.0</td>\n","      <td>18532.0</td>\n","      <td>17390.0</td>\n","      <td>15442.0</td>\n","      <td>180000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>30</td>\n","      <td>23469.0</td>\n","      <td>22382.0</td>\n","      <td>20401.0</td>\n","      <td>19353.0</td>\n","      <td>18336.0</td>\n","      <td>17345.0</td>\n","      <td>140000.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>42</td>\n","      <td>21953.5</td>\n","      <td>20432.0</td>\n","      <td>18411.0</td>\n","      <td>17915.5</td>\n","      <td>16784.0</td>\n","      <td>14691.0</td>\n","      <td>70000.0</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"3\" valign=\"top\">1</th>\n","      <th>1</th>\n","      <td>40</td>\n","      <td>21633.5</td>\n","      <td>21190.5</td>\n","      <td>20445.0</td>\n","      <td>19588.0</td>\n","      <td>19001.5</td>\n","      <td>18320.5</td>\n","      <td>100000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>29</td>\n","      <td>19438.0</td>\n","      <td>19844.0</td>\n","      <td>19492.0</td>\n","      <td>18859.0</td>\n","      <td>18187.0</td>\n","      <td>17976.0</td>\n","      <td>80000.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>44</td>\n","      <td>18126.0</td>\n","      <td>18459.0</td>\n","      <td>18942.0</td>\n","      <td>18300.0</td>\n","      <td>17760.0</td>\n","      <td>17327.0</td>\n","      <td>50000.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3995097c-0f1c-463e-9bc8-1abbaf00a4f0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3995097c-0f1c-463e-9bc8-1abbaf00a4f0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3995097c-0f1c-463e-9bc8-1abbaf00a4f0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9bed0855-378d-4318-bd22-c435e0f73dfe\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9bed0855-378d-4318-bd22-c435e0f73dfe')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9bed0855-378d-4318-bd22-c435e0f73dfe button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"pd\",\n  \"rows\": 6,\n  \"fields\": [\n    {\n      \"column\": \"AGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 29,\n        \"max\": 44,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          39,\n          30,\n          44\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2017.0912886299088,\n        \"min\": 18126.0,\n        \"max\": 23469.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          22573.0,\n          23469.0,\n          18126.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1332.1969980699803,\n        \"min\": 18459.0,\n        \"max\": 22382.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          21022.0,\n          22382.0,\n          18459.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 813.2646965574411,\n        \"min\": 18411.0,\n        \"max\": 20445.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          19905.0,\n          20401.0,\n          18942.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 636.2031449676012,\n        \"min\": 17915.5,\n        \"max\": 19588.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          18532.0,\n          19353.0,\n          18300.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 775.9320685472408,\n        \"min\": 16784.0,\n        \"max\": 19001.5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          17390.0,\n          18336.0,\n          17760.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1452.3460245409838,\n        \"min\": 14691.0,\n        \"max\": 18320.5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          15442.0,\n          17345.0,\n          17327.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LIMIT_BAL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48442.40566555986,\n        \"min\": 50000.0,\n        \"max\": 180000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          180000.0,\n          140000.0,\n          50000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"GfCYOk0k9UYI"},"source":["From the pivot table we can understand the distribution of the defaulters and non-defaulters with respect to the `marriage` status of the customer. We observe that:\n","* Married people with `age` around 40 are more likely to default on payment if the `LIMIT_BAL` approved by the bank is lower.\n","* Singles with `age` around 29 are more likely to default on payment if the `LIMIT_BAL` approved by the bank is lower.\n","* Customres who have not specified their marriage status with `age` around 44 are more likely to default on payment if the `LIMIT_BAL` approved by the bank is lower."]},{"cell_type":"code","metadata":{"id":"cyKUopHK5DOn","colab":{"base_uri":"https://localhost:8080/","height":394},"executionInfo":{"status":"ok","timestamp":1718363826179,"user_tz":-330,"elapsed":10,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"92c70cd1-e9e6-4c7b-a8eb-64265490f58a"},"source":["# S3.3: Display the median value of the columns containing continous numeric values and group them by 'DEFAULT' and 'EDUCATION' columns.\n","pd.pivot_table(data = df,values = list1 ,index = [\"DEFAULT\",\"EDUCATION\"],aggfunc = 'median')"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                   AGE  BILL_AMT1  BILL_AMT2  BILL_AMT3  BILL_AMT4  BILL_AMT5  \\\n","DEFAULT EDUCATION                                                               \n","0       1           32    14712.0    14244.0    14394.0    13222.0    11599.0   \n","        2           34    28084.5    27057.0    24908.5    21228.5    19683.0   \n","        3           40    27220.5    25402.5    22889.0    19559.5    18610.0   \n","        4           32    10734.5     8872.5     7183.0    10412.5     6342.0   \n","        5           35    42407.0    36011.0    31500.0    27981.0    21617.0   \n","1       1           33    10797.5    11730.5    11391.0    10819.5    10466.5   \n","        2           33    25344.0    24653.0    23086.0    20423.0    19688.5   \n","        3           41    21508.0    21410.0    20453.0    19584.0    18362.0   \n","        4           29     5374.0    12360.0    20721.0     1000.0      326.0   \n","        5           41    73699.5    67973.5    60048.5    45139.0    27405.5   \n","\n","                   BILL_AMT6  LIMIT_BAL  \n","DEFAULT EDUCATION                        \n","0       1            10075.0   200000.0  \n","        2            19204.0   130000.0  \n","        3            17912.0   100000.0  \n","        4             5334.0   200000.0  \n","        5            12106.0   160000.0  \n","1       1             9667.0   150000.0  \n","        2            19414.5    80000.0  \n","        3            17636.0    50000.0  \n","        4              390.0   120000.0  \n","        5            25796.0   110000.0  "],"text/html":["\n","  <div id=\"df-5ba032f7-307d-414c-9aac-02d192a112ea\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th></th>\n","      <th>AGE</th>\n","      <th>BILL_AMT1</th>\n","      <th>BILL_AMT2</th>\n","      <th>BILL_AMT3</th>\n","      <th>BILL_AMT4</th>\n","      <th>BILL_AMT5</th>\n","      <th>BILL_AMT6</th>\n","      <th>LIMIT_BAL</th>\n","    </tr>\n","    <tr>\n","      <th>DEFAULT</th>\n","      <th>EDUCATION</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th rowspan=\"5\" valign=\"top\">0</th>\n","      <th>1</th>\n","      <td>32</td>\n","      <td>14712.0</td>\n","      <td>14244.0</td>\n","      <td>14394.0</td>\n","      <td>13222.0</td>\n","      <td>11599.0</td>\n","      <td>10075.0</td>\n","      <td>200000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>34</td>\n","      <td>28084.5</td>\n","      <td>27057.0</td>\n","      <td>24908.5</td>\n","      <td>21228.5</td>\n","      <td>19683.0</td>\n","      <td>19204.0</td>\n","      <td>130000.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>40</td>\n","      <td>27220.5</td>\n","      <td>25402.5</td>\n","      <td>22889.0</td>\n","      <td>19559.5</td>\n","      <td>18610.0</td>\n","      <td>17912.0</td>\n","      <td>100000.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>32</td>\n","      <td>10734.5</td>\n","      <td>8872.5</td>\n","      <td>7183.0</td>\n","      <td>10412.5</td>\n","      <td>6342.0</td>\n","      <td>5334.0</td>\n","      <td>200000.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>35</td>\n","      <td>42407.0</td>\n","      <td>36011.0</td>\n","      <td>31500.0</td>\n","      <td>27981.0</td>\n","      <td>21617.0</td>\n","      <td>12106.0</td>\n","      <td>160000.0</td>\n","    </tr>\n","    <tr>\n","      <th rowspan=\"5\" valign=\"top\">1</th>\n","      <th>1</th>\n","      <td>33</td>\n","      <td>10797.5</td>\n","      <td>11730.5</td>\n","      <td>11391.0</td>\n","      <td>10819.5</td>\n","      <td>10466.5</td>\n","      <td>9667.0</td>\n","      <td>150000.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>25344.0</td>\n","      <td>24653.0</td>\n","      <td>23086.0</td>\n","      <td>20423.0</td>\n","      <td>19688.5</td>\n","      <td>19414.5</td>\n","      <td>80000.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>41</td>\n","      <td>21508.0</td>\n","      <td>21410.0</td>\n","      <td>20453.0</td>\n","      <td>19584.0</td>\n","      <td>18362.0</td>\n","      <td>17636.0</td>\n","      <td>50000.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>29</td>\n","      <td>5374.0</td>\n","      <td>12360.0</td>\n","      <td>20721.0</td>\n","      <td>1000.0</td>\n","      <td>326.0</td>\n","      <td>390.0</td>\n","      <td>120000.0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>41</td>\n","      <td>73699.5</td>\n","      <td>67973.5</td>\n","      <td>60048.5</td>\n","      <td>45139.0</td>\n","      <td>27405.5</td>\n","      <td>25796.0</td>\n","      <td>110000.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ba032f7-307d-414c-9aac-02d192a112ea')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5ba032f7-307d-414c-9aac-02d192a112ea button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5ba032f7-307d-414c-9aac-02d192a112ea');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c2c7d9fd-663c-4ac6-a7b9-ecaca4c44f69\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c2c7d9fd-663c-4ac6-a7b9-ecaca4c44f69')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c2c7d9fd-663c-4ac6-a7b9-ecaca4c44f69 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"pd\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"AGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 29,\n        \"max\": 41,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          32,\n          34,\n          41\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 19966.293880841058,\n        \"min\": 5374.0,\n        \"max\": 73699.5,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          5374.0,\n          28084.5,\n          10797.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17310.86502235582,\n        \"min\": 8872.5,\n        \"max\": 67973.5,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          12360.0,\n          27057.0,\n          11730.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14586.418149543546,\n        \"min\": 7183.0,\n        \"max\": 60048.5,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          20721.0,\n          24908.5,\n          11391.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11876.971760979779,\n        \"min\": 1000.0,\n        \"max\": 45139.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          1000.0,\n          21228.5,\n          10819.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8073.653019578905,\n        \"min\": 326.0,\n        \"max\": 27405.5,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          326.0,\n          19683.0,\n          10466.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"BILL_AMT6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7612.56139712515,\n        \"min\": 390.0,\n        \"max\": 25796.0,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          390.0,\n          19204.0,\n          9667.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LIMIT_BAL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48762.46279442598,\n        \"min\": 50000.0,\n        \"max\": 200000.0,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          120000.0,\n          130000.0,\n          80000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"W_oLxKxt9VV4"},"source":["From the pivot table, we can understand the distribution of the defaulters and non-defaulters with respect to the `EDUCATION` status of the customer. We observe that clients having lower approved `LIMIT_BAL` are more likely to default irrespective of the educational background.\n"]},{"cell_type":"markdown","metadata":{"id":"ep0bMFUou1qx"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"_FFFc0n-edmx"},"source":["#### Activity 4: Subplots\n","\n","Let's create count plots displaying the number of defaulters by their gender, marital status and education together through just one figure. To plot all the figures together, you need to use the `subplots()` function of `matplotlib.pyplot` module. It creates a figure and a set of subplots. This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call. Its **syntax** is:\n","\n","> `subplots(nrows, ncols, figsize, sharex = False, sharey = False, squeeze = True)`\n","\n","where\n","\n","- **`nrows, ncols`:** Sets the number of rows/columns of the subplot grid.\n","\n","- **`sharex, sharey`:** Controls sharing of properties among $x$ (`sharex`) or $y$ (`sharey`) axes. Its default value is `False`. It can take one of `'none', 'all', 'row', 'col'` values as well as inputs.\n","\n","  - If set to `True` or `'all'`, then $x$ or $y$-axis will be shared among all subplots.\n","  \n","  - If set to `False` or `'none'`, then each subplot $x$ or $y$-axis will be independent.\n","  \n","  - If set to `'row'`, then each subplot row will share an $x$ or $y$-axis.\n","  \n","  - If set to `'col'`, then each subplot column will share an $x$ or $y$-axis.\n","\n","  When subplots have a shared $x$-axis along a column, only the $x$ tick labels of the bottom subplot are created. Similarly, when subplots have a shared $y$-axis along a row, only the $y$ tick labels of the first column subplot are created. To later turn other subplots' ticklabels on, use `tick_params`.\n","\n","  When subplots have a shared axis that has units, calling `set_units` will update each axis with the new units.\n","\n","- **`squeezebool`:** Its default value is `True`\n","  \n","  - If `True`, extra dimensions are squeezed out from the returned array of `Axes`:\n","    \n","    - If only one subplot is constructed (`nrows = ncols = 1`), the resulting single `Axes` object is returned as a scalar.\n","    \n","    - for $N \\times 1$ or $1 \\times M$ subplots, the returned object is a 1D numpy object array of `Axes` objects.\n","    \n","    - for $N \\times M$, subplots with $N > 1$ and $M > 1$ are returned as a 2D array.\n","\n","      where $N$ and $M$ are the number of rows and columns in the `Axes` grid.\n","\n","  - If `False`, no squeezing at all is done: the returned `Axes` object is always a 2D array containing Axes instances, even if it ends up being $1 \\times 1$.\n","\n","You can read about the `subplots()` function in detail by clicking on the link provided below:\n","\n","https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.subplots.html\n","\n","To create such a plot:\n","\n","- Call the `subplots()` function on object of `matplotlib.pyplot` and unpack the figure and axis objects in two different variables, say `fig` and `axis`. Inside the `subplots()` function, pass:\n","\n","  - `nrows = 1` and `ncols = 3` parameters to create a figure having 1 row and 3 columns.\n","\n","  - `figsize = (14, 5)` parameter to create the figure of 14 units wide and 5 units high.\n","\n","  - `dpi = 96` parameter to further enlarge the figure based on their pixel density.\n","\n","  - `sharey = True` to share the $x$-axis of the figure among all the subplots to be created.\n","\n","- Call the `countplot()` function thrice one by one and pass the relevant input parameters to create count plots for `SEX, MARRIAGE` add `EDUCATION` columns along with `ax = axis[0], ax = axis[1]` and `ax = axis[2]` as additional inputs.\n","\n","- Call the `suptitle()` on the figure object to provide a title to the subplot.\n","\n","- Call the `show()` function on the `matplotlib.pyplot` object."]},{"cell_type":"code","metadata":{"id":"k8zry20yAOJ_","colab":{"base_uri":"https://localhost:8080/","height":394},"executionInfo":{"status":"ok","timestamp":1718363833526,"user_tz":-330,"elapsed":7356,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"44cd8a42-1218-4442-cf21-0c4cc3becef3"},"source":["# S4.1: Create count plots showing defaulters grouped by 'SEX', 'MARRIAGE' and 'EDUCATION' in just one figure.\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","fig,axis = plt.subplots(nrows = 1,ncols = 3 ,figsize = (15,6))\n","sns.countplot(x= \"SEX\" ,hue = \"DEFAULT\",data = df,ax = axis[0])\n","sns.countplot(x= \"MARRIAGE\" , hue = \"DEFAULT\",data = df,ax = axis[1])\n","sns.countplot(x= \"EDUCATION\" , hue = \"DEFAULT\",data = df,ax = axis[2])\n","plt.show()"],"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x600 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"oQoB58qNNz-u"},"source":["Similarly, you can create box plots displaying the age and credit limit of defaulters grouped by `'SEX', 'MARRIAGE'` and `'EDUCATION'` in just one figure.\n","\n","**Note:**\n","\n","- To get an axis at second row and third column from a grid of, say 3 rows and 5 columns figure, use `axis[1, 2]`.\n","\n","- Whenever you have more than one input values to the `y` parameter in any kind of plot, make sure that `sharey` parameter is set to `False` inside the `subplots()` function."]},{"cell_type":"code","metadata":{"id":"0a8og4qeLHUU","colab":{"base_uri":"https://localhost:8080/","height":749},"executionInfo":{"status":"ok","timestamp":1718364071256,"user_tz":-330,"elapsed":4158,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"16e11ea3-75b4-4733-97c7-5453d93c1bad"},"source":["# S4.2: Create box plots displaying the age and credit limit of defaulters grouped by 'SEX', 'MARRIAGE' and 'EDUCATION' in just one figure.\n","fig,axis = plt.subplots(nrows =2 ,ncols =  3,figsize = (15,12),sharex = True,sharey = False)\n","sns.boxplot(x = \"SEX\",y = \"LIMIT_BAL\",data=df, ax = axis[0,0],hue = \"DEFAULT\")\n","sns.boxplot(x = \"MARRIAGE\",y = \"LIMIT_BAL\",data = df, ax = axis[0,1],hue = \"DEFAULT\")\n","sns.boxplot(x = \"EDUCATION\",y = \"LIMIT_BAL\",data = df, ax = axis[0,2],hue = \"DEFAULT\")\n","sns.boxplot(x = \"SEX\",y = \"AGE\",data=df, ax = axis[1,0],hue = \"DEFAULT\")\n","sns.boxplot(x = \"MARRIAGE\",y = \"AGE\",data = df, ax = axis[1,1],hue = \"DEFAULT\")\n","sns.boxplot(x = \"EDUCATION\",y = \"AGE\",data = df, ax = axis[1,2],hue = \"DEFAULT\")\n","plt.show()"],"execution_count":30,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x1200 with 6 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["print(axis)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"D2d3NgLLdg_Y","executionInfo":{"status":"ok","timestamp":1718363844549,"user_tz":-330,"elapsed":6,"user":{"displayName":"Kosuru Sai","userId":"00280760452482234609"}},"outputId":"2ec91daf-60bd-4466-aadf-d5599d533722"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["[[<Axes: xlabel='SEX', ylabel='LIMIT_BAL'>\n","  <Axes: xlabel='MARRIAGE', ylabel='LIMIT_BAL'>\n","  <Axes: xlabel='EDUCATION', ylabel='LIMIT_BAL'>]\n"," [<Axes: > <Axes: > <Axes: >]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"d9oW-z4CR-lW"},"source":["Let's stop here. We will learn to build a decision tree model to predict the credit card payment defaulters in the next class."]},{"cell_type":"markdown","metadata":{"id":"302W5-pCSHQJ"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"UhMu94i4kz_P"},"source":["### **Project**\n","You can now attempt the **Applied Tech. Project 98 - Pivot Tables & Subplots** on your own.\n","\n","**Applied Tech. Project 98 - Pivot Tables & Subplots**: https://colab.research.google.com/drive/1awgFNs0X--xyH6xHHv3_UknFfpC83_Ql"]},{"cell_type":"markdown","metadata":{"id":"CDDJQV3Uk8pW"},"source":["---"]}]}